plugins {
    id 'application'
    id 'java'
    id 'jacoco'
    id 'com.diffplug.spotless' version '6.5.0'
    id "io.freefair.lombok" version "6.4.3"
    id 'org.openjfx.javafxplugin' version '0.0.11'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}
mainClassName = 'edu.wpi.teamname.Main'

repositories {
    mavenCentral()
}

javafx {
    version = "17"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.graphics', 'javafx.media', 'javafx.swing']
}

dependencies {
    implementation(
            //MaterialFX UI Framework
            'io.github.palexdev:materialfx:11.13.5',

            // You may comment out the database dependency you do not use
            'org.xerial:sqlite-jdbc:3.36.0.3',
            'org.apache.derby:derby:10.15.2.0',

            'org.slf4j:slf4j-api:1.7.36',
            'org.slf4j:slf4j-simple:1.7.36',
    )

    testImplementation(
            "org.testfx:testfx-core:4.0.16-alpha",
            'org.junit.jupiter:junit-jupiter:5.8.2',
            'org.testfx:testfx-junit5:4.0.16-alpha',
    )
}

tasks.withType(JavaCompile).configureEach {
    options.fork = true
}


test {
    useJUnitPlatform()
}

tasks.withType(Test).configureEach {
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}

def codeCoverageExcludes = [
        'edu.wpi.teamname.App',
        'edu.wpi.teamname.Main',
]

jacoco {
    toolVersion = "0.8.4"
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
            excludes = codeCoverageExcludes
        }

        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.25
            }
            excludes = codeCoverageExcludes
        }

        rule {
            element = 'CLASS'
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.25
            }
            excludes = codeCoverageExcludes
        }
    }
}

check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn jacocoTestReport
compileJava.dependsOn 'spotlessApply'

spotless {
    java {
        googleJavaFormat()
    }
}
